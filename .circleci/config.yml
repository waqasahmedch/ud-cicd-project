# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy backend & frontend environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"          
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/KvQh27UrJqkHvbUihqtrPG/migration_${CIRCLE_WORKFLOW_ID:0:7})
              if(( $SUCCESS==1 )); 
                then
                cd ~/project/backend
                npm install
                npm run migrations:revert            
              fi                       

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
#####################################################
# 1 -  Building Frontend
#####################################################
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
#            exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
#####################################################
# 2 - Building Backend
#####################################################
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build      
#####################################################
# 3 - Test Front end
#####################################################
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install
            npm run test             
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test     
#####################################################
# 4 - Test Backend
#####################################################
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test     
#####################################################
# 5 - Scan front end 
#####################################################
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan   
#####################################################
# 6- Scan back end 
#####################################################
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical           
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan   

#####################################################
# 7 - Deploy backend Infra 
#####################################################
  deploy-infrastructure:
     docker:
       - image: amazon/aws-cli
     steps:
       - checkout  
       - run:
          name: installing tar package to persist the file 
          command: | 
               yum install -y tar gzip        
       - run:
          name: Ensure backend infrastructure exists 
          command: | 
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
                
       - run:
          name: Ensure frontend infrastructure exists 
          command: | 
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
                
       - run:
          name: Add back-end ip to ansible inventory
          command: |           
               aws --region us-east-1 ec2 describe-instances \
                   --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                   --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
                   --output text >> ~/project/.circleci/ansible/inventory.txt

       - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

       - attach_workspace:
           at: ~/
       - run: cat ~/project/.circleci/ansible/inventory.txt

       -   destroy-environment

#####################################################
# 8 - configure Infra 
#####################################################
  configure-infrastructure:
      docker:
        - image: python:3.7.11-alpine3.13
      steps:
        - checkout
        # Add ssh keys with fingerprint
        - add_ssh_keys:
            fingerprints: ["98:ee:e9:da:eb:a1:df:56:dd:2d:52:c4:68:e4:ac:50"] 
        - run:
            name: Install dependencies
            command: |
              apk add tar gzip 
        - run:
            name: Install Ansibile
            command: |
              apk add --update ansible
        - run:
            name: Install aws cli
            command: |
              apk add --no-cache aws-cli

        # attach workspace
        - attach_workspace:
           at: ~/      

        - run:
            name: adding env varaibles to backend 
            command: |
                cd ~/project
                echo ENVIRONMENT=production >> "backend/.env"
                echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
                echo TYPEORM_ENTITIES="./modules/domain/**/*.entity{.ts,.js}" >> "backend/.env"
                echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
                echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
                echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
                echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"      
                echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
                echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
                echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
        - run:
             name: Configure server
             command: |
                ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
        
        # Here's where you will add some code to rollback on failure            
        -   destroy-environment
#####################################################
# 9 - Run DB Migration 
#####################################################
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Installing aws cli & updating  & curl 
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt install curl
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install 
            # npm audit fix --force --production
            # npm run build            
            # npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical   
            npm run migrations > migrations_dump.txt            
            cat ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                    then
                        echo "Migration was successfull."
                        curl --insecure https://kvdb.io/KvQh27UrJqkHvbUihqtrPG/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
                    else
                        echo "Migration was failed."
                        curl --insecure https://kvdb.io/KvQh27UrJqkHvbUihqtrPG/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
              fi

     # Here's where you will add some code to rollback on failure      
      - destroy-environment
      - revert-migrations
#####################################################
# 10 - Deploy frontend
#####################################################
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # attach workspace
      - attach_workspace:
          at: ~/      
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt install tar gzip curl
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances \
                   --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                   --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
                   --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            echo "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure      
      - destroy-environment
#####################################################
# 11 - Deploy backend
#####################################################
  deploy-backend:
    docker:
      - image: python:3.7.11-alpine3.13
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["98:ee:e9:da:eb:a1:df:56:dd:2d:52:c4:68:e4:ac:50"] 
      # attach workspace
      - attach_workspace:
          at: ~/      
      - run:
          name: install tar zip 
          command: |
            apk add tar gzip npm nodejs curl
      - run:
          name: install ansible
          command: |
            apk add --update ansible 
      - run:
          name: install aws cli 
          command: |
            apk add --no-cache aws-cli 

      - run:
          name: Deploy backend
          no_output_timeout: 10m
          command: |
            cd backend
            npm install 
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations
#####################################################
# 12 -  Smoke Test
#####################################################

  smoke-test:
    docker:
      - image: python:3.7.11-alpine3.13        
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl tar gzip 
      - run:
          name: install aws cli 
          command: |
            apk add --no-cache aws-cli 
      - run:
          name: Get backend url & perform smoke test
          command: |
            # your code here
            export BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances \
                   --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                   --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
                   --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            export API_STATUS=$(curl -s "${API_URL}/api/status")
            echo "${API_STATUS}"
            if "${API_STATUS}" | grep "ok"
              then
                  return 0
              else
                  return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
              then
                # Change this to 0 after the job fails
                return 1
              else
                return 1
            fi

      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

#####################################################
# 13 -  cloud front update
#####################################################
  cloudfront-update:
    docker:
       - image: amazon/aws-cli
    steps:
       - checkout  
       - run:
          name: installing tar package to persist the file 
          command: | 
               yum install -y tar gzip        
       - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
       - destroy-environment
       
#####################################################
# 14 -  clean up 
#####################################################


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  defaults:
    jobs:
       - build-frontend
       - build-backend
       - test-frontend:
           requires: [build-frontend]
       - test-backend:
           requires: [build-backend]
       - scan-frontend:
           requires: [build-frontend]
       - scan-backend:
           requires: [build-backend]
       - deploy-infrastructure:    
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
       - configure-infrastructure:
          requires: [deploy-infrastructure]
       - run-migrations:
          requires: [configure-infrastructure]
       - deploy-frontend:
          requires: [run-migrations]
       - deploy-backend:   
          requires: [run-migrations, deploy-frontend]
       - smoke-test:
          requires: [deploy-backend, deploy-frontend]          
