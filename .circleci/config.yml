# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            
      - run:
          name: Destroy front end environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl 
            # SUCCESS = 1
            # if(( $SUCCESS==1 )); 
            # then
            #   cd ~/project/backend
            #   npm install
            #   npm run migrations:revert
            #   exit 1
            # fi
                       

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
#####################################################
#  Building Frontend
#####################################################
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
#            exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
#####################################################
#  Building Backend
#####################################################
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps: 
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build             
#            exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build      
#####################################################
#  Test Front end
#####################################################
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end Test
          command: |
            cd frontend
            npm install
            npm run test             
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test     
#####################################################
#  Test Backend
#####################################################
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end Test
          command: |
            cd backend
            npm install
            npm run test             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test     
#####################################################
#  Scan front end 
#####################################################
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical           
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan   
#####################################################
#  Scan back end 
#####################################################
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical           
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan   

#####################################################
#  Deploy backend Infra 
#####################################################
  deploy-infrastructure:
     docker:
       - image: amazon/aws-cli
     steps:
       - checkout  
       - run:
          name: installing tar package to persist the file 
          command: | 
               yum install -y tar gzip        
       - run:
          name: Ensure backend infrastructure exists 
          command: | 
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
                
       - run:
          name: Ensure frontend infrastructure exists 
          command: | 
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
                
       - run:
          name: Add back-end ip to ansible inventory
          command: |           
               aws --region us-east-1 ec2 describe-instances \
                   --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                   --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
                   --output text >> ~/project/.circleci/ansible/inventory.txt

       - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

       - attach_workspace:
           at: ~/
       - run: cat ~/project/.circleci/ansible/inventory.txt

      #  - run: 
      #     command: return 1
      #  -   destroy-environment

#####################################################
#  Deploy backend Infra 
#####################################################
  configure-infrastructure:
      docker:
        - image: python:3.7.11-alpine3.13
      steps:
        - checkout
        # Add ssh keys with fingerprint
        - add_ssh_keys:
            fingerprints: ["98:ee:e9:da:eb:a1:df:56:dd:2d:52:c4:68:e4:ac:50"] 
        - run:
            name: Install dependencies
            command: |
              apk add tar gzip 
        - run:
            name: Install Ansibile
            command: |
              apk add --update ansible
        - run:
            name: Install aws cli
            command: |
              apk add --no-cache aws-cli

        # attach workspace
        - attach_workspace:
           at: ~/      

        - run:
             name: Configure server
             command: |
                ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
        
        # Here's where you will add some code to rollback on failure     

        # - run: 
        #    command: return 1
        # -   destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm i
            npm audit fix --force --production
            # npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical   
            npm run migrations > migrations_dump.txt            
      - run:
          name: Send migration results to memstash
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                    then
                        curl https://kvdb.io/FhjoK7LK4GrnLz8M3vMkyy/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi


     # Here's where you will add some code to rollback on failure      
      - run: 
           command: return 1
      -   destroy-environment


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  defaults:
    jobs:
       - build-frontend
       - build-backend
       - test-frontend:
           requires: [build-frontend]
       - test-backend:
           requires: [build-backend]
       - scan-frontend:
           requires: [build-frontend]
       - scan-backend:
           requires: [build-backend]
       - deploy-infrastructure:    
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
       - configure-infrastructure:
          requires: [deploy-infrastructure]
       - run-migrations:
          requires: [configure-infrastructure]
